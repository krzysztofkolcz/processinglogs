/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package processing.service;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import processing.dao.EventDao;
import processing.model.LogLine;

public class Processing {

    Logger LOG = LoggerFactory.getLogger(Processing.class);
    private static final int CHUNK_SIZE = 1;
    private final LineParser lineParser;
    private final EventProcessor eventProcessor;
    private final EventDao eventDao;

    public Processing(LineParser lineParser, EventProcessor eventProcessor, EventDao eventDao) {
	super();
	this.lineParser = lineParser;
	this.eventProcessor = eventProcessor;
	this.eventDao = eventDao;
    }

    public void read(String path) throws IOException {
	LOG.info("Start processing file: {}", path);
	try (InputStreamReader isr = new InputStreamReader(new FileInputStream(path), StandardCharsets.UTF_8);
		BufferedReader br = new BufferedReader(isr);) {
	    String line;
	    while ((line = br.readLine()) != null) {
		// TODO - multithreading - process several lines with one thread
		LogLine logLine = this.lineParser.parse(line);
		this.eventProcessor.processLine(logLine);
		// TODO - one entity persist or in chunks
		if (this.eventProcessor.getStoredEventsSize() > CHUNK_SIZE) {
		    this.eventDao.saveAllEvents(this.eventProcessor.getStoredEventsAndClear());
		}
	    }
	    if (this.eventProcessor.getStoredEventsSize() > 0) {
		this.eventDao.saveAllEvents(this.eventProcessor.getStoredEventsAndClear());
	    }
	}
	LOG.info("End processing file: {}", path);
    }

}
